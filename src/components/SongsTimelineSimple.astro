---
import { getCollection } from 'astro:content';

// Obtener todas las lecciones que tienen canciones
const lessons = await getCollection('blog', ({ data }) => {
  return data.originalSong && data.originalSong.title;
});

// Crear timeline de canciones ordenado por a√±o
const songsTimeline = lessons
  .map(lesson => ({
    id: lesson.data.day,
    year: lesson.data.originalSong.year,
    title: lesson.data.originalSong.title,
    artist: lesson.data.originalSong.artist,
    country: lesson.data.originalSong.origin || lesson.data.originalSong.language?.toUpperCase() || '?',
    genre: lesson.data.originalSong.genre || 'song',
    slug: lesson.slug,
    description: lesson.data.description
  }))
  .sort((a, b) => a.year - b.year);

// Estad√≠sticas
const stats = {
  totalSongs: songsTimeline.length,
  yearRange: {
    earliest: Math.min(...songsTimeline.map(s => s.year)),
    latest: Math.max(...songsTimeline.map(s => s.year))
  },
  genres: [...new Set(songsTimeline.map(s => s.genre))],
  countries: [...new Set(songsTimeline.map(s => s.country))]
};
---

<div class="songs-timeline-simple">
  <div class="timeline-container">
    <div class="timeline-header">
      <h2>Timeline de Himnos Obreros</h2>
      <p>Cronolog√≠a de canciones revolucionarias a trav√©s de la historia</p>
      
      <div class="timeline-stats">
        <div class="stat-item">
          <span class="stat-value">{stats.totalSongs}</span>
          <span class="stat-label">Canciones</span>
        </div>
        <div class="stat-item">
          <span class="stat-value">{stats.yearRange.latest - stats.yearRange.earliest}</span>
          <span class="stat-label">A√±os</span>
        </div>
        <div class="stat-item">
          <span class="stat-value">{stats.genres.length}</span>
          <span class="stat-label">G√©neros</span>
        </div>
        <div class="stat-item">
          <span class="stat-value">{stats.countries.length}</span>
          <span class="stat-label">Or√≠genes</span>
        </div>
      </div>
    </div>
    
    <div class="timeline">
      {songsTimeline.map((song) => (
        <div class="timeline-event" data-song-id={song.id}>
          <div class="timeline-point" title={`${song.title} (${song.year})`}></div>
          <div class="event-content">
            <div class="event-year">{song.year}</div>
            <div class="event-title">{song.title}</div>
            {song.artist && (
              <div class="event-artist">{song.artist}</div>
            )}
            <div class="event-meta">
              <span class="event-country">{song.country}</span>
              <span class="event-genre">{song.genre}</span>
            </div>
            <div class="event-description">{song.description}</div>
          </div>
        </div>
      ))}
    </div>
  </div>
</div>

<style>
  .songs-timeline-simple {
    max-width: 1000px;
    margin: 0 auto;
    padding: var(--space-xl);
  }

  .timeline-container {
    position: relative;
    max-width: 800px;
    margin: 0 auto;
  }

  .timeline-header {
    text-align: center;
    margin-bottom: var(--space-3xl);
  }

  .timeline-header h2 {
    color: var(--color-revolutionary-red);
    margin-bottom: var(--space-md);
  }

  .timeline-stats {
    display: flex;
    justify-content: center;
    gap: var(--space-xl);
    margin-bottom: var(--space-xl);
    flex-wrap: wrap;
  }

  .stat-item {
    text-align: center;
    background: var(--color-paper);
    padding: var(--space-md) var(--space-lg);
    border-radius: var(--radius-md);
    border: 1px solid var(--color-border);
    box-shadow: var(--shadow-sm);
    transition: all 0.3s ease;
  }

  .stat-item:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-md);
  }

  .stat-value {
    display: block;
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--color-revolutionary-red);
  }

  .stat-label {
    font-size: 0.85rem;
    color: var(--color-text-muted);
  }

  .timeline {
    position: relative;
    padding: var(--space-xl) 0;
  }

  .timeline::before {
    content: '';
    position: absolute;
    left: 50%;
    top: 0;
    bottom: 0;
    width: 3px;
    background: linear-gradient(to bottom, 
      var(--color-revolutionary-red), 
      var(--color-socialist-gold), 
      var(--color-revolutionary-red)
    );
    transform: translateX(-50%);
  }

  .timeline-event {
    position: relative;
    margin-bottom: var(--space-2xl);
    width: 100%;
    cursor: pointer;
  }

  .timeline-event:nth-child(odd) .event-content {
    margin-left: calc(50% + var(--space-xl));
  }

  .timeline-event:nth-child(even) .event-content {
    margin-right: calc(50% + var(--space-xl));
    text-align: right;
  }

  .timeline-point {
    position: absolute;
    left: 50%;
    top: 20px;
    width: 20px;
    height: 20px;
    background: var(--color-revolutionary-red);
    border: 4px solid var(--color-paper);
    border-radius: 50%;
    transform: translateX(-50%);
    box-shadow: var(--shadow-md);
    z-index: 2;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .timeline-event:hover .timeline-point {
    transform: translateX(-50%) scale(1.3);
    background: var(--color-socialist-gold);
  }

  .event-content {
    background: var(--color-paper);
    padding: var(--space-lg);
    border-radius: var(--radius-lg);
    border: 1px solid var(--color-border);
    box-shadow: var(--shadow-md);
    position: relative;
    transition: all 0.3s ease;
  }

  .timeline-event:hover .event-content {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
    border-color: var(--color-revolutionary-red-light);
  }

  .event-year {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--color-revolutionary-red);
    margin-bottom: var(--space-xs);
  }

  .event-title {
    font-size: 1.1rem;
    font-weight: 600;
    color: var(--color-text-primary);
    margin-bottom: var(--space-xs);
  }

  .event-artist {
    font-size: 0.9rem;
    color: var(--color-text-secondary);
    font-style: italic;
    margin-bottom: var(--space-sm);
  }

  .event-meta {
    display: flex;
    gap: var(--space-md);
    flex-wrap: wrap;
    font-size: 0.9rem;
    margin-bottom: var(--space-sm);
  }

  .timeline-event:nth-child(even) .event-meta {
    justify-content: flex-end;
  }

  .event-country {
    background: var(--color-socialist-gold-light);
    color: var(--color-socialist-gold-dark);
    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--radius-sm);
    font-weight: 500;
  }

  .event-genre {
    background: var(--color-border-light);
    color: var(--color-text-muted);
    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--radius-sm);
  }

  .event-description {
    font-size: 0.9rem;
    color: var(--color-text-secondary);
    line-height: 1.5;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .timeline::before {
      left: 30px;
    }

    .timeline-point {
      left: 30px;
    }

    .timeline-event:nth-child(odd) .event-content,
    .timeline-event:nth-child(even) .event-content {
      margin-left: 60px;
      margin-right: 0;
      text-align: left;
    }

    .timeline-event:nth-child(even) .event-meta {
      justify-content: flex-start;
    }

    .timeline-stats {
      gap: var(--space-md);
    }

    .stat-item {
      padding: var(--space-sm) var(--space-md);
      min-width: 80px;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const timelineEvents = document.querySelectorAll('.timeline-event');
  
  timelineEvents.forEach(event => {
    event.addEventListener('click', function() {
      const songId = this.dataset.songId;
      
      if (songId) {
        // Navegar a la lecci√≥n correspondiente
        const dayStr = songId.toString().padStart(2, '0');
        const lessonUrl = `${import.meta.env.BASE_URL}blog/?search=dia-${dayStr}`;
        
        console.log(`üéµ Navegando a lecci√≥n del d√≠a ${dayStr}`);
        window.location.href = lessonUrl;
      }
    });
  });
  
  console.log('‚úÖ Timeline de canciones inicializado');
});
</script>