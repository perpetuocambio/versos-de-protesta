---
export interface Props {
  language: string;
  initialWords?: number;
  availableLangs: Record<string, string>;
  baseUrl: string;
}

const { language, initialWords = 20, availableLangs, baseUrl } = Astro.props;
---

<div class="dynamic-dictionary" data-language={language}>
  <!-- Skeleton loader inicial -->
  <div class="dictionary-skeleton" id="dictionary-skeleton">
    <div class="skeleton-header">
      <div class="skeleton-text skeleton-title"></div>
      <div class="skeleton-text skeleton-subtitle"></div>
    </div>
    <div class="skeleton-search">
      <div class="skeleton-input"></div>
    </div>
    <div class="skeleton-grid">
      {Array.from({length: initialWords}, (_, i) => (
        <div class="skeleton-card" key={i}>
          <div class="skeleton-text skeleton-word"></div>
          <div class="skeleton-text skeleton-translation"></div>
          <div class="skeleton-text skeleton-source"></div>
        </div>
      ))}
    </div>
  </div>
  
  <!-- Contenido real (se carga dinámicamente) -->
  <div class="dictionary-content" id="dictionary-content" style="display: none;">
    <!-- El contenido se insertará aquí vía JavaScript -->
  </div>
  
  <!-- Indicador de carga -->
  <div class="loading-indicator" id="loading-indicator" style="display: none;">
    <div class="spinner"></div>
    <p>Cargando vocabulario...</p>
  </div>
  
  <!-- Error handler -->
  <div class="error-message" id="error-message" style="display: none;">
    <div class="error-icon">⚠️</div>
    <h3>Error cargando diccionario</h3>
    <p>No se pudo cargar el vocabulario. <button onclick="retryLoad()">Reintentar</button></p>
  </div>

  <!-- Modal para detalles de la palabra -->
  <div id="word-modal" class="modal" style="display: none !important;">
    <div class="modal-content">
      <span class="close-button">&times;</span>
      <div id="modal-body"></div>
    </div>
  </div>
</div>

<style is:global>
  /* Estilos base */
  .dynamic-dictionary { width: 100%; position: relative; }
  .dictionary-skeleton { animation: fadeIn 0.5s ease-in-out; }
  .skeleton-header { text-align: center; margin-bottom: var(--space-2xl); }
  .skeleton-text { background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%); background-size: 200% 100%; animation: shimmer 1.5s infinite; border-radius: var(--radius-md); }
  .skeleton-title { height: 3rem; width: 300px; margin: 0 auto var(--space-lg); }
  .skeleton-subtitle { height: 1.5rem; width: 200px; margin: 0 auto; }
  .skeleton-search { max-width: 500px; margin: 0 auto var(--space-2xl); }
  .skeleton-input { height: 3rem; width: 100%; background: linear-gradient(90deg, #f0f0f0 25%, #e0e0e0 50%, #f0f0f0 75%); background-size: 200% 100%; animation: shimmer 1.5s infinite; border-radius: var(--radius-lg); }
  .skeleton-grid { display: grid; grid-template-columns: repeat(auto-fill, minmax(300px, 1fr)); gap: var(--space-lg); }
  .skeleton-card { background: var(--color-paper); padding: var(--space-xl); border-radius: var(--radius-lg); border: 1px solid var(--color-border); box-shadow: var(--shadow-sm); }
  .skeleton-word { height: 2rem; width: 60%; margin-bottom: var(--space-lg); }
  .skeleton-translation { height: 1rem; width: 80%; margin-bottom: var(--space-md); }
  .skeleton-source { height: 1rem; width: 40%; }
  @keyframes shimmer { 0% { background-position: -200% 0; } 100% { background-position: 200% 0; } }
  @keyframes fadeIn { from { opacity: 0; } to { opacity: 1; } }
  .loading-indicator { text-align: center; padding: var(--space-3xl); display: flex; flex-direction: column; align-items: center; gap: var(--space-lg); }
  .spinner { width: 40px; height: 40px; border: 4px solid var(--color-border-light); border-top: 4px solid var(--color-revolutionary-red); border-radius: 50%; animation: spin 1s linear infinite; }
  @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
  .error-message { text-align: center; padding: var(--space-3xl); background: var(--color-paper); border: 2px solid var(--color-border); border-radius: var(--radius-lg); color: var(--color-text-secondary); }
  .error-icon { font-size: 3rem; margin-bottom: var(--space-lg); }
  .error-message button { background: var(--color-revolutionary-red); color: white; border: none; padding: var(--space-md) var(--space-lg); border-radius: var(--radius-md); cursor: pointer; font-weight: 600; margin-top: var(--space-md); }
  .error-message button:hover { background: var(--color-revolutionary-red-dark); }
  .dictionary-content { animation: slideIn 0.5s ease-out; }
  @keyframes slideIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
  @media (max-width: 768px) { .skeleton-grid { grid-template-columns: 1fr; } .skeleton-title { width: 250px; } }

  .modal {
    position: fixed; z-index: 1000; left: 0; top: 0; width: 100%; height: 100%;
    overflow: auto; background-color: rgba(0,0,0,0.6);
    display: flex; align-items: center; justify-content: center;
  }
  .modal-content {
    background-color: var(--color-background);
    margin: auto; padding: var(--space-2xl);
    border: 1px solid var(--color-border);
    width: 80%; max-width: 700px; border-radius: var(--radius-lg);
    box-shadow: var(--shadow-lg);
    position: relative;
  }
  .close-button {
    color: var(--color-text-secondary); float: right; font-size: 2rem; font-weight: bold;
    cursor: pointer;
  }
  .close-button:hover, .close-button:focus { color: var(--color-text-primary); }

  /* Estilos para el contenido dinámico del diccionario */
  .dictionary-header { 
    text-align: center; 
    margin-bottom: var(--space-2xl); 
    padding-bottom: var(--space-lg);
    border-bottom: 2px solid var(--color-revolutionary-red-light);
  }
  .dictionary-header h2 { 
    color: var(--color-revolutionary-red); 
    margin-bottom: var(--space-md); 
    font-size: clamp(1.5rem, 4vw, 2rem);
  }
  .dictionary-header p { 
    color: var(--color-text-secondary); 
    font-size: 1.1rem; 
    font-weight: 500;
  }

  .search-section { 
    margin-bottom: var(--space-2xl); 
  }
  #word-search { 
    width: 100%; 
    max-width: 500px; 
    margin: 0 auto var(--space-lg); 
    display: block;
    padding: var(--space-md) var(--space-lg); 
    border: 2px solid var(--color-border); 
    border-radius: var(--radius-lg); 
    font-size: 1rem;
    font-family: var(--font-primary);
    transition: all 0.2s ease;
    background: var(--color-paper);
  }
  #word-search:focus { 
    outline: none; 
    border-color: var(--color-revolutionary-red); 
    box-shadow: 0 0 0 3px var(--color-revolutionary-red-light);
  }

  .alphabet-filter { 
    display: flex; 
    flex-wrap: wrap; 
    justify-content: center; 
    gap: var(--space-sm); 
    margin-bottom: var(--space-lg);
  }
  .letter-btn { 
    background: var(--color-paper); 
    border: 2px solid var(--color-border); 
    color: var(--color-text-secondary); 
    padding: var(--space-sm) var(--space-md); 
    border-radius: var(--radius-md); 
    cursor: pointer; 
    font-weight: 500;
    font-family: var(--font-primary);
    transition: all 0.2s ease;
    min-width: 45px;
  }
  .letter-btn:hover { 
    background: var(--color-revolutionary-red-light); 
    border-color: var(--color-revolutionary-red); 
    color: var(--color-revolutionary-red-dark);
    transform: translateY(-1px);
  }
  .letter-btn.active { 
    background: var(--color-revolutionary-red); 
    border-color: var(--color-revolutionary-red); 
    color: white; 
    font-weight: 600;
  }

  .dictionary-grid { 
    display: grid; 
    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr)); 
    gap: var(--space-lg); 
  }
  .word-card { 
    background: var(--color-paper); 
    border: 1px solid var(--color-border); 
    border-radius: var(--radius-lg); 
    padding: var(--space-xl); 
    cursor: pointer; 
    transition: all 0.2s ease;
    box-shadow: var(--shadow-sm);
  }
  .word-card:hover { 
    transform: translateY(-2px); 
    box-shadow: var(--shadow-lg); 
    border-color: var(--color-revolutionary-red-light);
  }
  .word-title { 
    color: var(--color-revolutionary-red); 
    margin-bottom: var(--space-md); 
    font-size: 1.4rem;
    font-weight: 700;
  }
  .word-meta { 
    display: flex; 
    flex-direction: column; 
    gap: var(--space-sm); 
  }
  .word-meta span { 
    font-size: 0.9rem; 
    color: var(--color-text-secondary); 
  }
  .meaning { 
    color: var(--color-socialist-gold-dark); 
    font-weight: 600;
  }
  .lessons {
    color: var(--color-text-muted);
  }

  /* Estilos para el modal */
  .modal-entry {
    margin-bottom: var(--space-lg);
    padding-bottom: var(--space-lg);
    border-bottom: 1px solid var(--color-border);
  }
  .modal-entry:last-child {
    border-bottom: none;
    margin-bottom: 0;
    padding-bottom: 0;
  }
  .modal-entry h4 {
    color: var(--color-revolutionary-red);
    margin: var(--space-md) 0 var(--space-sm) 0;
    font-size: 1.1rem;
  }
  .modal-entry ul {
    margin: 0;
    padding-left: var(--space-lg);
  }
  .modal-entry li {
    margin-bottom: var(--space-xs);
    color: var(--color-text-secondary);
  }
  .post-link {
    color: var(--color-revolutionary-red);
    text-decoration: none;
    font-weight: 500;
    padding: var(--space-sm) var(--space-md);
    border: 1px solid var(--color-revolutionary-red-light);
    border-radius: var(--radius-md);
    display: inline-block;
    margin-top: var(--space-sm);
    transition: all 0.2s ease;
  }
  .post-link:hover {
    background: var(--color-revolutionary-red);
    color: white;
    transform: translateY(-1px);
  }

  /* Estilos responsivos */
  @media (max-width: 768px) {
    .dictionary-grid { 
      grid-template-columns: 1fr; 
    }
    .alphabet-filter {
      gap: var(--space-xs);
    }
    .letter-btn {
      min-width: 40px;
      padding: var(--space-xs) var(--space-sm);
      font-size: 0.9rem;
    }
    #word-search {
      margin: 0 0 var(--space-lg) 0;
    }
  }
</style>

<script define:vars={{ language, availableLangs, baseUrl }}>
document.addEventListener('DOMContentLoaded', async function() {
  const container = document.querySelector('.dynamic-dictionary');
  const skeleton = document.getElementById('dictionary-skeleton');
  const contentEl = document.getElementById('dictionary-content');
  const loading = document.getElementById('loading-indicator');
  const error = document.getElementById('error-message');
  const modal = document.getElementById('word-modal');
  const modalBody = document.getElementById('modal-body');
  const closeModalBtn = document.querySelector('.close-button');

  let dictionaryData = null;
  let allWords = [];

  async function loadDictionaryData() {
    try {
      console.log(` Cargando diccionario dinámico para: ${availableLangs[language]} (${language})`);
      
      // Mostrar loading después de 300ms si no ha cargado
      const loadingTimeout = setTimeout(() => {
        skeleton.style.display = 'none';
        loading.style.display = 'flex';
      }, 300);

      const manifestResponse = await fetch(`${baseUrl}data/internal/v1/dictionary/chunks-manifest.json`);
      if (!manifestResponse.ok) throw new Error('No se pudo cargar el manifest de chunks');
      const manifest = await manifestResponse.json();

      const langManifest = manifest.languages.find(lang => lang.code === language);
      if (!langManifest) throw new Error(`No se encontró manifest para el idioma ${language}`);
      const chunkFile = langManifest.chunksPath.split('/').pop().replace('*', 'lessons-0-11.json');
      if (!chunkFile) throw new Error(`No se encontró chunk para el idioma ${language}`);

      const chunkResponse = await fetch(`${baseUrl}data/internal/v1/dictionary/chunks/${chunkFile}`);
      if (!chunkResponse.ok) throw new Error(`No se pudo cargar el archivo de chunk ${chunkFile}`);
      
      dictionaryData = await chunkResponse.json();
      allWords = Object.entries(dictionaryData.words);

      clearTimeout(loadingTimeout);
      
      console.log(`Diccionario cargado: ${allWords.length} palabras`);
      
      renderDictionary();
      
      skeleton.style.display = 'none';
      loading.style.display = 'none';
      error.style.display = 'none';
      contentEl.style.display = 'block';
      
    } catch (err) {
      console.error('Error cargando diccionario:', err);
      skeleton.style.display = 'none';
      loading.style.display = 'none';
      contentEl.style.display = 'none';
      error.style.display = 'block';
    }
  }
  
  function renderDictionary() {
    if (!dictionaryData) return;
    
    const letters = [...new Set(allWords.map(([word]) => word[0].toUpperCase()))].sort();

    contentEl.innerHTML = `
      <style>
        .dictionary-content .dictionary-header { 
          text-align: center; 
          margin-bottom: var(--space-2xl); 
          padding-bottom: var(--space-lg);
          border-bottom: 2px solid var(--color-revolutionary-red-light);
        }
        .dictionary-content .dictionary-header h2 { 
          color: var(--color-revolutionary-red); 
          margin-bottom: var(--space-md); 
          font-size: clamp(1.5rem, 4vw, 2rem);
        }
        .dictionary-content .dictionary-header p { 
          color: var(--color-text-secondary); 
          font-size: 1.1rem; 
          font-weight: 500;
        }
        .dictionary-content .search-section { 
          margin-bottom: var(--space-2xl); 
        }
        .dictionary-content #word-search { 
          width: 100%; 
          max-width: 500px; 
          margin: 0 auto var(--space-lg); 
          display: block;
          padding: var(--space-md) var(--space-lg); 
          border: 2px solid var(--color-border); 
          border-radius: var(--radius-lg); 
          font-size: 1rem;
          font-family: var(--font-primary);
          transition: all 0.2s ease;
          background: var(--color-paper);
        }
        .dictionary-content #word-search:focus { 
          outline: none; 
          border-color: var(--color-revolutionary-red); 
          box-shadow: 0 0 0 3px var(--color-revolutionary-red-light);
        }
        .dictionary-content .alphabet-filter { 
          display: flex; 
          flex-wrap: wrap; 
          justify-content: center; 
          gap: var(--space-sm); 
          margin-bottom: var(--space-lg);
        }
        .dictionary-content .letter-btn { 
          background: var(--color-paper); 
          border: 2px solid var(--color-border); 
          color: var(--color-text-secondary); 
          padding: var(--space-sm) var(--space-md); 
          border-radius: var(--radius-md); 
          cursor: pointer; 
          font-weight: 500;
          font-family: var(--font-primary);
          transition: all 0.2s ease;
          min-width: 45px;
        }
        .dictionary-content .letter-btn:hover { 
          background: var(--color-revolutionary-red-light); 
          border-color: var(--color-revolutionary-red); 
          color: var(--color-revolutionary-red-dark);
          transform: translateY(-1px);
        }
        .dictionary-content .letter-btn.active { 
          background: var(--color-revolutionary-red); 
          border-color: var(--color-revolutionary-red); 
          color: white; 
          font-weight: 600;
        }
        .dictionary-content .dictionary-grid { 
          display: grid; 
          grid-template-columns: repeat(auto-fill, minmax(320px, 1fr)); 
          gap: var(--space-lg); 
        }
        .dictionary-content .word-card { 
          background: var(--color-paper); 
          border: 1px solid var(--color-border); 
          border-radius: var(--radius-lg); 
          padding: var(--space-xl); 
          cursor: pointer; 
          transition: all 0.2s ease;
          box-shadow: var(--shadow-sm);
        }
        .dictionary-content .word-card:hover { 
          transform: translateY(-2px); 
          box-shadow: var(--shadow-lg); 
          border-color: var(--color-revolutionary-red-light);
        }
        .dictionary-content .word-title { 
          color: var(--color-revolutionary-red); 
          margin-bottom: var(--space-md); 
          font-size: 1.4rem;
          font-weight: 700;
        }
        .dictionary-content .word-meta { 
          display: flex; 
          flex-direction: column; 
          gap: var(--space-sm); 
        }
        .dictionary-content .word-meta span { 
          font-size: 0.9rem; 
          color: var(--color-text-secondary); 
        }
        .dictionary-content .meaning { 
          color: var(--color-socialist-gold-dark); 
          font-weight: 600;
        }
        .dictionary-content .lessons {
          color: var(--color-text-muted);
        }
        @media (max-width: 768px) {
          .dictionary-content .dictionary-grid { 
            grid-template-columns: 1fr; 
          }
          .dictionary-content .alphabet-filter {
            gap: var(--space-xs);
          }
          .dictionary-content .letter-btn {
            min-width: 40px;
            padding: var(--space-xs) var(--space-sm);
            font-size: 0.9rem;
          }
          .dictionary-content #word-search {
            margin: 0 0 var(--space-lg) 0;
          }
        }
        
        /* Estilos para el modal */
        .modal {
          position: fixed !important;
          z-index: 1000 !important;
          left: 0 !important;
          top: 0 !important;
          width: 100% !important;
          height: 100% !important;
          overflow: auto !important;
          background-color: rgba(0,0,0,0.7) !important;
          align-items: center !important;
          justify-content: center !important;
        }
        .modal[style*="display: none"] {
          display: none !important;
        }
        .modal[style*="display: flex"] {
          display: flex !important;
        }
        .modal-content {
          background-color: var(--color-paper) !important;
          margin: auto !important;
          padding: var(--space-2xl) !important;
          border: 1px solid var(--color-border) !important;
          width: 90% !important;
          max-width: 700px !important;
          border-radius: var(--radius-lg) !important;
          box-shadow: var(--shadow-xl) !important;
          position: relative !important;
          max-height: 80vh !important;
          overflow-y: auto !important;
        }
        .close-button {
          color: var(--color-text-secondary) !important;
          float: right !important;
          font-size: 2rem !important;
          font-weight: bold !important;
          cursor: pointer !important;
          line-height: 1 !important;
          padding: var(--space-xs) !important;
        }
        .close-button:hover, .close-button:focus {
          color: var(--color-revolutionary-red) !important;
        }
        
        /* Estilos para la sección de trazos chinos */
        .stroke-section {
          margin-bottom: 1.5rem !important;
          padding: 1rem !important;
          background: #f8f9fa !important;
          border-radius: 8px !important;
          border: 1px solid #e9ecef !important;
        }
        .stroke-section h4 {
          margin-bottom: 1rem !important;
          color: var(--color-revolutionary-red) !important;
          font-size: 1.2rem !important;
          text-align: center !important;
        }
        .stroke-gifs {
          display: flex !important;
          flex-wrap: wrap !important;
          gap: 0.75rem !important;
          justify-content: center !important;
        }
        .stroke-gif {
          text-align: center !important;
          transition: transform 0.2s ease !important;
        }
        .stroke-gif:hover {
          transform: scale(1.05) !important;
        }
        .stroke-gif img {
          width: 100px !important;
          height: 100px !important;
          border: 2px solid #ddd !important;
          border-radius: 6px !important;
          background: white !important;
          box-shadow: 0 2px 4px rgba(0,0,0,0.1) !important;
          transition: border-color 0.2s ease !important;
        }
        .stroke-gif img:hover {
          border-color: var(--color-revolutionary-red) !important;
        }
        .stroke-gif div {
          font-size: 0.9rem !important;
          color: #495057 !important;
          margin-top: 0.5rem !important;
          font-weight: 600 !important;
        }
        
        /* Responsive para móviles */
        @media (max-width: 768px) {
          .stroke-gif img {
            width: 80px !important;
            height: 80px !important;
          }
          .stroke-gifs {
            gap: 0.5rem !important;
          }
        }
        @media (max-width: 480px) {
          .stroke-gif img {
            width: 70px !important;
            height: 70px !important;
          }
          .stroke-section {
            padding: 0.75rem !important;
          }
        }
        .modal-entry {
          margin-bottom: var(--space-lg) !important;
          padding-bottom: var(--space-lg) !important;
          border-bottom: 1px solid var(--color-border) !important;
        }
        .modal-entry:last-child {
          border-bottom: none !important;
          margin-bottom: 0 !important;
          padding-bottom: 0 !important;
        }
        .modal-entry h4 {
          color: var(--color-revolutionary-red) !important;
          margin: var(--space-md) 0 var(--space-sm) 0 !important;
          font-size: 1.1rem !important;
        }
        .modal-entry ul {
          margin: 0 !important;
          padding-left: var(--space-lg) !important;
        }
        .modal-entry li {
          margin-bottom: var(--space-xs) !important;
          color: var(--color-text-secondary) !important;
        }
        .post-link {
          color: var(--color-revolutionary-red) !important;
          text-decoration: none !important;
          font-weight: 500 !important;
          padding: var(--space-sm) var(--space-md) !important;
          border: 1px solid var(--color-revolutionary-red-light) !important;
          border-radius: var(--radius-md) !important;
          display: inline-block !important;
          margin-top: var(--space-sm) !important;
          transition: all 0.2s ease !important;
        }
        .post-link:hover {
          background: var(--color-revolutionary-red) !important;
          color: white !important;
          transform: translateY(-1px) !important;
        }
        #modal-body h2 {
          color: var(--color-revolutionary-red) !important;
          margin-bottom: var(--space-lg) !important;
          font-size: 1.8rem !important;
          font-weight: 700 !important;
        }
        #modal-body p {
          color: var(--color-text-primary) !important;
          line-height: 1.6 !important;
          margin-bottom: var(--space-md) !important;
        }
        #modal-body strong {
          color: var(--color-text-primary) !important;
          font-weight: 600 !important;
        }
      </style>
      <div class="dictionary-header">
        <h2>Vocabulario de ${language}</h2>
        <p>${allWords.length} palabras encontradas</p>
      </div>
      <div class="search-section">
        <input type="text" id="word-search" placeholder="Buscar palabras..." />
        <div class="alphabet-filter" id="alphabet-filter">
          <button class="letter-btn active" data-letter="all">Todos</button>
          ${letters.map(letter => 
            `<button class="letter-btn" data-letter="${letter}">${letter}</button>`
          ).join('')}
        </div>
      </div>
      <div class="dictionary-grid" id="dictionary-grid">
        ${allWords.map(([word, data]) => {
          const details = JSON.stringify(data).replace(/'/g, '&apos;');
          return `
            <div class="word-card" data-word-raw="${word}" data-word-details='${details}' data-letter="${word[0].toUpperCase()}">
              <h3 class="word-title">${word}</h3>
              <div class="word-meta">
                <span class="meaning">${language === 'es' ? `Primera aparición: Día ${data.firstAppearance}` : `Significado: ${data.meaning}`}</span>
                <span class="lessons">Lecciones: ${data.lessons.join(', ')}</span>
              </div>
            </div>
          `;
        }).join('')}
      </div>
    `;
  }

  function setupEventListeners() {
    const searchInput = document.getElementById('word-search');
    const dictionaryGrid = document.getElementById('dictionary-grid');
    const alphabetFilter = document.getElementById('alphabet-filter');

    searchInput?.addEventListener('input', (e) => {
      const query = e.target.value.toLowerCase().trim();
      document.querySelectorAll('.word-card').forEach(card => {
        const word = card.dataset.wordRaw.toLowerCase();
        card.style.display = word.includes(query) ? '' : 'none';
      });
      alphabetFilter.querySelector('.active')?.classList.remove('active');
    });

    alphabetFilter?.addEventListener('click', (e) => {
        if (e.target.tagName !== 'BUTTON') return;
        const letter = e.target.dataset.letter;

        alphabetFilter.querySelector('.active')?.classList.remove('active');
        e.target.classList.add('active');

        document.querySelectorAll('.word-card').forEach(card => {
            if (letter === 'all' || card.dataset.letter === letter) {
                card.style.display = '';
            } else {
                card.style.display = 'none';
            }
        });
        searchInput.value = '';
    });

    dictionaryGrid?.addEventListener('click', (e) => {
      const card = e.target.closest('.word-card');
      if (card) {
        console.log('Word card clicked:', card.dataset.wordRaw);
        const details = JSON.parse(card.dataset.wordDetails.replace(/&apos;/g, "'"));
        showWordDetails(card.dataset.wordRaw, details);
      }
    });
  }

  // Función para convertir caracteres chinos a códigos Unicode decimales para MDBG
  function getChineseStrokeGifs(chineseText) {
    if (!chineseText || typeof chineseText !== 'string') return [];
    
    const gifs = [];
    for (let i = 0; i < chineseText.length; i++) {
      const char = chineseText[i];
      // Verificar que sea un carácter chino (CJK)
      if (/[\u4e00-\u9fff]/.test(char)) {
        const unicodeDecimal = char.codePointAt(0);
        gifs.push({
          char: char,
          url: `https://www.mdbg.net/chinese/rsc/img/stroke_anim/${unicodeDecimal}.gif`
        });
      }
    }
    return gifs;
  }

  function showWordDetails(word, data) {
    let detailsHtml = `<h2>${word}</h2>`;

    // Agregar trazos de caracteres chinos si aplica
    const containsChinese = /[\u4e00-\u9fff]/.test(word) || 
                           (data.entries[0]?.allTranslations?.zh && /[\u4e00-\u9fff]/.test(data.entries[0].allTranslations.zh));
    
    if (language === 'zh' || language === 'zh-pinyin' || containsChinese) {
      let chineseText = '';
      
      if (language === 'zh') {
        chineseText = word;
      } else if (language === 'zh-pinyin') {
        chineseText = data.entries[0]?.allTranslations?.zh || data.entries[0]?.translations?.zh || '';
      } else if (containsChinese && /[\u4e00-\u9fff]/.test(word)) {
        chineseText = word;
      } else if (containsChinese && data.entries[0]?.allTranslations?.zh) {
        chineseText = data.entries[0].allTranslations.zh;
      }
      
      if (chineseText && typeof chineseText === 'string') {
        const strokeGifs = getChineseStrokeGifs(chineseText);
        
        if (strokeGifs.length > 0) {
          detailsHtml += `<div class="stroke-section">`;
          detailsHtml += `<h4>✍️ Orden de trazos (${strokeGifs.length} carácter${strokeGifs.length > 1 ? 'es' : ''}):</h4>`;
          detailsHtml += `<div class="stroke-gifs">`;
          strokeGifs.forEach((gif, idx) => {
            detailsHtml += `<div class="stroke-gif">`;
            // Añadir numeración para múltiples caracteres
            if (strokeGifs.length > 1) {
              detailsHtml += `<div style="font-size: 0.7rem; color: #999; margin-bottom: 0.25rem;">${idx + 1}</div>`;
            }
            detailsHtml += `<img src="${gif.url}" alt="Trazos de ${gif.char}" loading="lazy" onerror="this.parentElement.innerHTML='<div style=\\'width:100px;height:100px;border:2px dashed #ccc;display:flex;align-items:center;justify-content:center;color:#999;font-size:0.8rem;text-align:center;\\'>No disponible<br>${gif.char}</div>'">`;
            detailsHtml += `<div>${gif.char}</div>`;
            detailsHtml += `</div>`;
          });
          detailsHtml += `</div>`;
          detailsHtml += `<p style="font-size: 0.8rem; color: #666; text-align: center; margin-top: 0.5rem; font-style: italic;">Los GIFs muestran el orden correcto de escritura de cada trazo</p>`;
          detailsHtml += `</div>`;
        }
      }
    }

    data.entries.forEach((entry, index) => {
        detailsHtml += `<div class="modal-entry" style="margin-bottom: 1rem; border-bottom: 1px solid #ccc; padding-bottom: 1rem;">`;
        detailsHtml += `<p><strong>Significado ${index + 1}:</strong> ${entry.meaning}</p>`;
        
        const translations = entry.allTranslations || entry.translations;
        if (translations) {
            detailsHtml += '<h4>Traducciones:</h4><ul>';
            const langOrder = ['es', 'en', 'de', 'pt', 'ru', 'ruRom', 'zh', 'zhPinyin'];
            langOrder.forEach(lang => {
                if (translations[lang]) {
                    detailsHtml += `<li><strong>${lang}:</strong> ${translations[lang]}</li>`;
                }
            });
            detailsHtml += '</ul>';
        }

        // Mostrar todas las lecciones donde aparece la palabra
        const lessons = entry.lessons || [entry.day];
        if (lessons.length === 1) {
            detailsHtml += `<p><a href="${baseUrl}blog/${entry.source}/" class="post-link">Ver en la lección del día ${lessons[0]}</a></p>`;
        } else {
            detailsHtml += `<p><strong>Aparece en las lecciones:</strong> `;
            lessons.forEach((day, idx) => {
                if (idx > 0) detailsHtml += ', ';
                detailsHtml += `<a href="${baseUrl}blog/dia-${day.toString().padStart(2, '0')}/" class="post-link">Día ${day}</a>`;
            });
            detailsHtml += `</p>`;
        }
        detailsHtml += `</div>`;
    });

    modalBody.innerHTML = detailsHtml;
    const currentModal = document.getElementById('word-modal');
    if (currentModal) {
      console.log('Setting modal display to flex');
      currentModal.style.setProperty('display', 'flex', 'important');
    } else {
      console.error('Modal element not found!');
    }
  }

  function closeModal() {
    const currentModal = document.getElementById('word-modal');
    if (currentModal) {
      currentModal.style.setProperty('display', 'none', 'important');
    }
  }

  async function init() {
    // Asegurarse de que el modal esté oculto al inicio
    const currentModal = document.getElementById('word-modal');
    if (currentModal) {
      currentModal.style.setProperty('display', 'none', 'important');
    }
    
    await loadDictionaryData();
    setupEventListeners();
    
    // Configurar event listeners del modal después de cargar el contenido
    setupModalListeners();
  }

  function setupModalListeners() {
    // Limpiar listeners previos
    const newCloseBtn = document.querySelector('.close-button');
    const newModal = document.getElementById('word-modal');
    
    if (newCloseBtn) {
      newCloseBtn.addEventListener('click', closeModal);
    }
    
    if (newModal) {
      newModal.addEventListener('click', (e) => {
        if (e.target === newModal) {
          closeModal();
        }
      });
    }
  }

  window.retryLoad = init;
  
  init();
});
</script>