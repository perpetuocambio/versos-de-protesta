---
/**
 * VISUALIZADOR DE ÁRBOLES SINTÁCTICOS
 * ===================================
 * 
 * Componente interactivo que muestra árboles sintácticos SVG
 * para análisis gramatical comparativo entre idiomas.
 */

export interface Props {
  sentence?: string;
  language?: string;
  baseUrl: string;
  showComparative?: boolean;
}

const { sentence, language = 'es', baseUrl, showComparative = false } = Astro.props;
---

<div class="syntax-tree-visualizer" data-language={language}>
  <div class="visualizer-header">
    <h3>🌳 Análisis Sintáctico</h3>
    <div class="language-selector" id="language-selector">
      <button class="lang-btn active" data-lang="es">ES</button>
      <button class="lang-btn" data-lang="en">EN</button>
      <button class="lang-btn" data-lang="de">DE</button>
      <button class="lang-btn" data-lang="pt">PT</button>
      <button class="lang-btn" data-lang="ru">RU</button>
    </div>
  </div>
  
  <div class="sentence-input-section">
    <input 
      type="text" 
      id="sentence-input" 
      placeholder="Introduce una oración para analizar..."
      value={sentence || ""}
    />
    <button id="analyze-btn">🔍 Analizar</button>
  </div>
  
  <div class="syntax-display" id="syntax-display">
    <div class="loading-syntax">
      <div class="syntax-spinner"></div>
      <p>Cargando análisis sintáctico...</p>
    </div>
  </div>
  
  {showComparative && (
    <div class="comparative-section" id="comparative-section" style="display: none;">
      <h4>📊 Comparación entre idiomas</h4>
      <div class="comparative-grid" id="comparative-grid">
        <!-- Se llena dinámicamente -->
      </div>
    </div>
  )}
  
  <div class="pattern-examples" id="pattern-examples">
    <h4>🎵 Frases de las canciones</h4>
    <div class="example-buttons">
      <button class="example-btn" data-song="L'Internationale">La Internacional</button>
      <button class="example-btn" data-song="A las Barricadas">A las Barricadas</button>
      <button class="example-btn" data-song="Der heimliche Aufmarsch">Der heimliche Aufmarsch</button>
    </div>
  </div>
  
  <div class="syntax-legend">
    <h5>📋 Leyenda</h5>
    <div class="legend-grid">
      <span class="legend-item"><span class="pos-tag det">Det</span> Determinante</span>
      <span class="legend-item"><span class="pos-tag n">N</span> Sustantivo</span>
      <span class="legend-item"><span class="pos-tag v">V</span> Verbo</span>
      <span class="legend-item"><span class="pos-tag adj">Adj</span> Adjetivo</span>
      <span class="legend-item"><span class="pos-tag prep">Prep</span> Preposición</span>
      <span class="legend-item"><span class="pos-tag adv">Adv</span> Adverbio</span>
    </div>
  </div>
</div>

<style>
  .syntax-tree-visualizer {
    background: linear-gradient(135deg, #f8f9fa, #e9ecef);
    border-radius: 16px;
    padding: 2rem;
    margin: 2rem 0;
    border: 2px solid #dee2e6;
    box-shadow: 0 8px 24px rgba(0,0,0,0.1);
  }

  .visualizer-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .visualizer-header h3 {
    margin: 0;
    color: #2c3e50;
    font-size: 1.5rem;
  }

  .language-selector {
    display: flex;
    gap: 0.5rem;
    background: white;
    padding: 0.25rem;
    border-radius: 8px;
    border: 1px solid #dee2e6;
  }

  .lang-btn {
    padding: 0.5rem 0.75rem;
    border: none;
    background: transparent;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 600;
    font-size: 0.85rem;
    transition: all 0.2s ease;
  }

  .lang-btn:hover {
    background: #f8f9fa;
  }

  .lang-btn.active {
    background: #007bff;
    color: white;
  }

  .sentence-input-section {
    display: flex;
    gap: 1rem;
    margin-bottom: 2rem;
    align-items: stretch;
  }

  #sentence-input {
    flex: 1;
    padding: 0.75rem 1rem;
    border: 2px solid #dee2e6;
    border-radius: 8px;
    font-size: 1rem;
    transition: border-color 0.2s ease;
  }

  #sentence-input:focus {
    outline: none;
    border-color: #007bff;
  }

  #analyze-btn {
    padding: 0.75rem 1.5rem;
    background: linear-gradient(135deg, #007bff, #0056b3);
    color: white;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    font-weight: 600;
    transition: transform 0.2s ease;
  }

  #analyze-btn:hover {
    transform: translateY(-2px);
  }

  .syntax-display {
    background: white;
    border-radius: 12px;
    padding: 2rem;
    margin-bottom: 2rem;
    border: 1px solid #dee2e6;
    min-height: 200px;
    position: relative;
  }

  .loading-syntax {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 200px;
    color: #6c757d;
  }

  .syntax-spinner {
    width: 40px;
    height: 40px;
    border: 3px solid #e9ecef;
    border-top: 3px solid #007bff;
    border-radius: 50%;
    animation: spin 1s linear infinite;
    margin-bottom: 1rem;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  .syntax-tree {
    text-align: center;
    font-family: monospace;
  }

  .tree-node {
    display: inline-block;
    margin: 0.5rem;
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
    border: 2px solid #007bff;
    background: #f8f9fa;
    position: relative;
  }

  .tree-node.root {
    background: #007bff;
    color: white;
    font-weight: bold;
  }

  .tree-node.terminal {
    background: #28a745;
    color: white;
    border-color: #28a745;
  }

  .tree-children {
    margin-top: 1rem;
    display: flex;
    justify-content: center;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .tree-branch {
    position: relative;
  }

  .tree-branch::before {
    content: '';
    position: absolute;
    top: -1rem;
    left: 50%;
    width: 2px;
    height: 1rem;
    background: #6c757d;
    transform: translateX(-50%);
  }

  .sentence-analysis {
    background: #e7f3ff;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1rem;
    border-left: 4px solid #007bff;
  }

  .analysis-stats {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 1rem;
    margin-top: 1rem;
  }

  .stat-item {
    text-align: center;
    padding: 0.5rem;
    background: white;
    border-radius: 6px;
    border: 1px solid #dee2e6;
  }

  .stat-value {
    font-size: 1.2rem;
    font-weight: bold;
    color: #007bff;
  }

  .stat-label {
    font-size: 0.8rem;
    color: #6c757d;
    margin-top: 0.25rem;
  }

  .comparative-section {
    background: #f8f9fa;
    border-radius: 12px;
    padding: 1.5rem;
    margin-bottom: 2rem;
    border: 1px solid #dee2e6;
  }

  .comparative-section h4 {
    margin: 0 0 1rem 0;
    color: #495057;
  }

  .comparative-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 1rem;
  }

  .comparative-item {
    background: white;
    border-radius: 8px;
    padding: 1rem;
    border: 1px solid #dee2e6;
  }

  .comparative-item h5 {
    margin: 0 0 0.5rem 0;
    color: #007bff;
    font-size: 1rem;
  }

  .comparative-sentence {
    font-style: italic;
    color: #495057;
    margin-bottom: 0.5rem;
  }

  .pattern-examples {
    background: #fff3cd;
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1.5rem;
    border: 1px solid #ffeaa7;
  }

  .pattern-examples h4 {
    margin: 0 0 0.75rem 0;
    color: #856404;
  }

  .example-buttons {
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  .example-btn {
    padding: 0.5rem 1rem;
    background: #ffc107;
    color: #212529;
    border: none;
    border-radius: 6px;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.2s ease;
    font-size: 0.9rem;
  }

  .example-btn:hover {
    background: #e0a800;
    transform: translateY(-1px);
  }

  .syntax-legend {
    background: white;
    border-radius: 8px;
    padding: 1rem;
    border: 1px solid #dee2e6;
  }

  .syntax-legend h5 {
    margin: 0 0 0.75rem 0;
    color: #495057;
  }

  .legend-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
    gap: 0.5rem;
  }

  .legend-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.85rem;
  }

  .pos-tag {
    display: inline-block;
    padding: 0.2rem 0.4rem;
    border-radius: 4px;
    font-family: monospace;
    font-weight: bold;
    font-size: 0.75rem;
    color: white;
    min-width: 35px;
    text-align: center;
  }

  .pos-tag.det { background: #6f42c1; }
  .pos-tag.n { background: #fd7e14; }
  .pos-tag.v { background: #dc3545; }
  .pos-tag.adj { background: #198754; }
  .pos-tag.prep { background: #0dcaf0; }
  .pos-tag.adv { background: #6c757d; }

  /* Responsive */
  @media (max-width: 768px) {
    .syntax-tree-visualizer {
      padding: 1rem;
    }
    
    .visualizer-header {
      flex-direction: column;
      align-items: stretch;
    }
    
    .sentence-input-section {
      flex-direction: column;
    }
    
    .analysis-stats {
      grid-template-columns: 1fr 1fr;
    }
    
    .legend-grid {
      grid-template-columns: 1fr;
    }
  }
</style>

<script define:vars={{ sentence, language, baseUrl, showComparative }}>
document.addEventListener('DOMContentLoaded', function() {
  console.log('🌳 Inicializando visualizador sintáctico...');
  
  let currentLanguage = language;
  let grammarData = null;
  let syntaxData = null;
  
  const sentenceInput = document.getElementById('sentence-input');
  const analyzeBtn = document.getElementById('analyze-btn');
  const syntaxDisplay = document.getElementById('syntax-display');
  const languageSelector = document.getElementById('language-selector');
  const comparativeSection = showComparative ? document.getElementById('comparative-section') : null;
  const exampleButtons = document.querySelectorAll('.example-btn');
  
  // Cargar datos gramaticales
  async function loadGrammarData() {
    try {
      console.log('📖 Cargando datos gramaticales...');
      
      const [grammarResponse, syntaxResponse] = await Promise.all([
        fetch(`${baseUrl}data/grammar/index.json`),
        fetch(`${baseUrl}data/grammar/syntax-patterns.json`)
      ]);
      
      if (!grammarResponse.ok || !syntaxResponse.ok) {
        throw new Error('Error cargando datos gramaticales');
      }
      
      grammarData = await grammarResponse.json();
      syntaxData = await syntaxResponse.json();
      
      console.log('✅ Datos gramaticales cargados');
      
      // Si hay una oración inicial, analizarla
      if (sentence) {
        analyzeSentence(sentence);
      } else {
        showExamplePatterns();
      }
      
    } catch (error) {
      console.error('❌ Error cargando datos gramaticales:', error);
      syntaxDisplay.innerHTML = `
        <div style="text-align: center; color: #dc3545; padding: 2rem;">
          <h4>⚠️ Error cargando datos</h4>
          <p>No se pudieron cargar los datos gramaticales.</p>
        </div>
      `;
    }
  }
  
  // Analizar una oración
  function analyzeSentence(sentenceText) {
    if (!sentenceText || !syntaxData) return;
    
    console.log(`🔍 Analizando: "${sentenceText}" (${currentLanguage})`);
    
    // Simular análisis (en implementación real sería más sofisticado)
    const analysis = performSyntacticAnalysis(sentenceText, currentLanguage);
    const syntaxTree = generateSyntaxTree(analysis);
    
    displayAnalysis(sentenceText, analysis, syntaxTree);
    
    if (showComparative && comparativeSection) {
      showComparativeAnalysis(sentenceText);
    }
  }
  
  // Realizar análisis sintáctico básico
  function performSyntacticAnalysis(sentenceText, lang) {
    const words = sentenceText.split(/[\s.,!?]+/).filter(w => w.length > 0);
    
    const analysis = {
      sentence: sentenceText,
      language: lang,
      words: words,
      wordCount: words.length,
      complexity: words.length > 6 ? 'compleja' : words.length > 3 ? 'media' : 'simple',
      structure: words.map((word, index) => ({
        word: word,
        position: index,
        pos: guessPartOfSpeech(word, lang, index, words.length),
        features: analyzeWordFeatures(word, lang)
      })),
      pattern: detectSentencePattern(words, lang)
    };
    
    return analysis;
  }
  
  // Adivinar parte de la oración
  function guessPartOfSpeech(word, lang, position, totalWords) {
    const lowercaseWord = word.toLowerCase();
    
    // Artículos por idioma
    const articles = {
      es: ['el', 'la', 'los', 'las', 'un', 'una', 'unos', 'unas'],
      en: ['the', 'a', 'an'],
      de: ['der', 'die', 'das', 'den', 'dem', 'des', 'ein', 'eine'],
      pt: ['o', 'a', 'os', 'as', 'um', 'uma', 'uns', 'umas'],
      ru: [] // Sin artículos
    };
    
    if (articles[lang] && articles[lang].includes(lowercaseWord)) {
      return 'Det';
    }
    
    // Verbos comunes
    const commonVerbs = {
      es: ['es', 'está', 'son', 'están', 'canta', 'cantan', 'será', 'serán'],
      en: ['is', 'are', 'was', 'were', 'sing', 'sings', 'will'],
      de: ['ist', 'sind', 'war', 'waren', 'singt', 'singen', 'wird'],
      pt: ['é', 'são', 'está', 'estão', 'canta', 'cantam', 'será'],
      ru: ['поёт', 'поют', 'будет', 'будут', 'является']
    };
    
    if (commonVerbs[lang] && commonVerbs[lang].includes(lowercaseWord)) {
      return 'V';
    }
    
    // Preposiciones
    const prepositions = {
      es: ['a', 'de', 'en', 'con', 'por', 'para', 'desde', 'hasta'],
      en: ['to', 'of', 'in', 'with', 'for', 'by', 'from', 'until'],
      de: ['zu', 'von', 'in', 'mit', 'für', 'durch', 'nach', 'bei'],
      pt: ['a', 'de', 'em', 'com', 'por', 'para', 'desde', 'até'],
      ru: ['в', 'на', 'с', 'к', 'от', 'для', 'до', 'при']
    };
    
    if (prepositions[lang] && prepositions[lang].includes(lowercaseWord)) {
      return 'Prep';
    }
    
    // Por defecto, sustantivo
    return 'N';
  }
  
  // Analizar características de palabra
  function analyzeWordFeatures(word, lang) {
    const features = [];
    
    if (word.length > 8) features.push('long_word');
    if (/[A-Z]/.test(word[0])) features.push('capitalized');
    if (lang === 'de' && /[A-Z]/.test(word[0])) features.push('german_noun');
    if (lang === 'ru' && /[а-яё]/.test(word)) features.push('cyrillic');
    
    return features;
  }
  
  // Detectar patrón de oración
  function detectSentencePattern(words, lang) {
    // Análisis muy simplificado
    if (words.length === 0) return 'empty';
    if (words.length === 1) return 'fragment';
    if (words[0].endsWith('?')) return 'interrogative';
    if (words[0].endsWith('!')) return 'exclamative';
    
    return 'declarative';
  }
  
  // Generar árbol sintáctico
  function generateSyntaxTree(analysis) {
    return {
      type: 'S',
      value: 'Oración',
      children: analysis.structure.map(item => ({
        type: item.pos,
        value: item.word,
        features: item.features,
        terminal: true
      }))
    };
  }
  
  // Mostrar análisis
  function displayAnalysis(sentenceText, analysis, syntaxTree) {
    const html = `
      <div class="sentence-analysis">
        <h4>"${sentenceText}"</h4>
        <div class="analysis-stats">
          <div class="stat-item">
            <div class="stat-value">${analysis.wordCount}</div>
            <div class="stat-label">Palabras</div>
          </div>
          <div class="stat-item">
            <div class="stat-value">${analysis.complexity}</div>
            <div class="stat-label">Complejidad</div>
          </div>
          <div class="stat-item">
            <div class="stat-value">${analysis.pattern}</div>
            <div class="stat-label">Patrón</div>
          </div>
          <div class="stat-item">
            <div class="stat-value">${analysis.language.toUpperCase()}</div>
            <div class="stat-label">Idioma</div>
          </div>
        </div>
      </div>
      
      <div class="syntax-tree">
        ${renderSyntaxTree(syntaxTree)}
      </div>
      
      <div class="word-analysis">
        <h5>🔤 Análisis por palabras:</h5>
        <div style="display: flex; flex-wrap: wrap; gap: 0.5rem; margin-top: 0.75rem;">
          ${analysis.structure.map(item => 
            `<span class="pos-tag ${item.pos.toLowerCase()}" title="${item.features.join(', ')}">${item.pos}</span>
             <span style="margin-right: 1rem;">${item.word}</span>`
          ).join('')}
        </div>
      </div>
    `;
    
    syntaxDisplay.innerHTML = html;
  }
  
  // Renderizar árbol sintáctico
  function renderSyntaxTree(tree) {
    if (!tree.children || tree.children.length === 0) {
      return `<div class="tree-node terminal">${tree.value}</div>`;
    }
    
    return `
      <div class="tree-branch">
        <div class="tree-node root">${tree.value}</div>
        <div class="tree-children">
          ${tree.children.map(child => renderSyntaxTree(child)).join('')}
        </div>
      </div>
    `;
  }
  
  // Mostrar análisis comparativo
  function showComparativeAnalysis(sentenceText) {
    if (!syntaxData.examples) return;
    
    // Buscar frases similares en otros idiomas
    const comparativeHTML = Object.keys(syntaxData.examples).map(songKey => {
      const examples = syntaxData.examples[songKey];
      return Object.keys(examples).map(lang => {
        const example = examples[lang];
        return `
          <div class="comparative-item">
            <h5>${lang.toUpperCase()} - ${songKey}</h5>
            <div class="comparative-sentence">"${example.sentence}"</div>
            <div>Complejidad: ${example.analysis?.complexity || 'N/A'}</div>
          </div>
        `;
      }).join('');
    }).join('');
    
    if (comparativeSection) {
      comparativeSection.style.display = 'block';
      document.getElementById('comparative-grid').innerHTML = comparativeHTML;
    }
  }
  
  // Mostrar patrones de ejemplo
  function showExamplePatterns() {
    if (!syntaxData.patterns) return;
    
    const examplePattern = syntaxData.patterns.declarative;
    const langData = examplePattern[currentLanguage];
    
    if (langData) {
      const html = `
        <div class="pattern-showcase">
          <h4>🎯 Patrón ${currentLanguage.toUpperCase()}: ${langData.pattern}</h4>
          <div class="example-sentence">"${langData.example}"</div>
          <div class="pattern-structure">
            Estructura: ${langData.structure.join(' → ')}
          </div>
        </div>
      `;
      
      syntaxDisplay.innerHTML = html;
    }
  }
  
  // Event listeners
  analyzeBtn.addEventListener('click', () => {
    const text = sentenceInput.value.trim();
    if (text) {
      analyzeSentence(text);
    }
  });
  
  sentenceInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter') {
      analyzeBtn.click();
    }
  });
  
  // Selector de idioma
  languageSelector.addEventListener('click', (e) => {
    if (e.target.classList.contains('lang-btn')) {
      const newLang = e.target.dataset.lang;
      
      // Actualizar botones activos
      languageSelector.querySelectorAll('.lang-btn').forEach(btn => {
        btn.classList.remove('active');
      });
      e.target.classList.add('active');
      
      currentLanguage = newLang;
      
      // Re-analizar si hay texto
      const text = sentenceInput.value.trim();
      if (text) {
        analyzeSentence(text);
      } else {
        showExamplePatterns();
      }
    }
  });
  
  // Botones de ejemplo
  exampleButtons.forEach(btn => {
    btn.addEventListener('click', () => {
      const songKey = btn.dataset.song;
      if (syntaxData && syntaxData.examples && syntaxData.examples[songKey]) {
        const example = syntaxData.examples[songKey][currentLanguage];
        if (example) {
          sentenceInput.value = example.sentence;
          analyzeSentence(example.sentence);
        }
      }
    });
  });
  
  // Inicializar
  loadGrammarData();
});
</script>