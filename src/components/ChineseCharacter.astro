---
import RadicalAnalyzer from './advanced/RadicalAnalyzer.astro';

export interface Props {
  hanzi: string;
  pinyin?: string;
  translation?: string;
  size?: 'small' | 'medium' | 'large';
  showStroke?: boolean;
  showRadical?: boolean;
}

const { 
  hanzi, 
  pinyin = '', 
  translation = '', 
  size = 'medium',
  showStroke = true,
  showRadical = true
} = Astro.props;

// Obtener base URL para el componente RadicalAnalyzer
const baseUrl = import.meta.env.BASE_URL || '/';

// Calcular el c√≥digo Unicode del car√°cter
const charCode = hanzi.charCodeAt(0);

// URLs de stroke animations con fallbacks
const strokeUrls = [
  `https://www.mdbg.net/chinese/rsc/img/stroke_anim/${charCode}.gif`,
  `https://hanziwriter.org/images/animated/${charCode}.gif`
];

// Configuraciones de tama√±o
const sizeConfigs = {
  small: { char: '2rem', container: '120px' },
  medium: { char: '3rem', container: '180px' },
  large: { char: '4rem', container: '240px' }
};

const config = sizeConfigs[size];
---

<div class="chinese-character" data-hanzi={hanzi}>
  <div class="char-main" style={`width: ${config.container};`}>
    <!-- Car√°cter principal -->
    <div class="char-display" style={`font-size: ${config.char};`}>
      {hanzi}
    </div>
    
    <!-- Informaci√≥n fon√©tica y sem√°ntica -->
    {pinyin && (
      <div class="pinyin">
        {pinyin}
      </div>
    )}
    
    {translation && (
      <div class="translation">
        {translation}
      </div>
    )}
  </div>
  
  <!-- Animaci√≥n de trazos -->
  {showStroke && (
    <div class="stroke-section">
      <div class="stroke-container">
        <img 
          src={strokeUrls[0]}
          alt={`Orden de trazos para ${hanzi}`}
          class="stroke-animation"
          loading="lazy"
          onload="this.style.opacity='1'"
          onerror="this.style.display='none'; this.nextElementSibling.style.display='flex'"
        />
        <div class="stroke-fallback" style="display: none;">
          <div class="fallback-links">
            <a href={`https://www.mdbg.net/chinese/dictionary?wdqb=${hanzi}`} 
               target="_blank" 
               rel="noopener noreferrer"
               class="stroke-link">
              <span class="link-icon">‚úçÔ∏è</span>
              MDBG
            </a>
            <a href={`https://dict.baidu.com/s?wd=${hanzi}`}
               target="_blank"
               rel="noopener noreferrer" 
               class="stroke-link">
               <span class="link-icon">üìù</span>
               Baidu
            </a>
          </div>
          <div class="fallback-text">Ver trazos</div>
        </div>
      </div>
      
      <div class="stroke-info">
        <span class="stroke-label">C√≥digo: {charCode}</span>
      </div>
    </div>
  )}
  
  <!-- An√°lisis de radicales -->
  {showRadical && (
    <div class="radical-section">
      <RadicalAnalyzer character={hanzi} baseUrl={baseUrl} />
    </div>
  )}
</div>

<style>
  .chinese-character {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-md);
    padding: var(--space-lg);
    background: var(--color-paper);
    border-radius: var(--radius-lg);
    border: 2px solid var(--color-border);
    box-shadow: var(--shadow-sm);
    transition: all 0.3s ease;
    position: relative;
  }
  
  .chinese-character:hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-lg);
    border-color: var(--color-socialist-gold);
  }
  
  .char-main {
    text-align: center;
    position: relative;
  }
  
  .char-display {
    font-family: 'SimSun', 'Microsoft YaHei', 'ÂæÆËΩØÈõÖÈªë', serif;
    font-weight: 400;
    color: var(--color-charcoal);
    line-height: 1;
    margin-bottom: var(--space-sm);
    text-shadow: 0 1px 2px rgba(0,0,0,0.1);
    cursor: pointer;
    transition: color 0.2s ease;
  }
  
  .char-display:hover {
    color: var(--color-revolutionary-red);
  }
  
  .pinyin {
    font-family: var(--font-primary);
    font-size: 1rem;
    color: var(--color-socialist-gold-dark);
    font-weight: 600;
    margin-bottom: var(--space-xs);
    letter-spacing: 0.5px;
  }
  
  .translation {
    font-family: var(--font-primary);
    font-size: 0.9rem;
    color: var(--color-text-secondary);
    font-style: italic;
    max-width: 150px;
    line-height: 1.3;
  }
  
  .stroke-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--space-sm);
  }
  
  .stroke-container {
    position: relative;
    width: 120px;
    height: 120px;
    background: linear-gradient(135deg, #f8fafc, #f1f5f9);
    border-radius: var(--radius-md);
    border: 1px solid var(--color-border-light);
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
  }
  
  .stroke-animation {
    max-width: 100%;
    max-height: 100%;
    opacity: 0;
    transition: opacity 0.3s ease;
    border-radius: var(--radius-sm);
  }
  
  .stroke-fallback {
    flex-direction: column;
    align-items: center;
    gap: var(--space-sm);
    text-align: center;
    padding: var(--space-sm);
  }
  
  .fallback-links {
    display: flex;
    gap: var(--space-sm);
  }
  
  .stroke-link {
    display: flex;
    align-items: center;
    gap: var(--space-xs);
    padding: var(--space-xs) var(--space-sm);
    background: var(--color-revolutionary-red-light);
    color: var(--color-revolutionary-red-dark);
    text-decoration: none;
    border-radius: var(--radius-sm);
    font-size: 0.8rem;
    font-weight: 500;
    transition: all 0.2s ease;
  }
  
  .stroke-link:hover {
    background: var(--color-revolutionary-red);
    color: white;
    transform: translateY(-1px);
  }
  
  .link-icon {
    font-size: 1rem;
  }
  
  .fallback-text {
    font-size: 0.75rem;
    color: var(--color-text-muted);
  }
  
  .stroke-info {
    display: flex;
    align-items: center;
    gap: var(--space-sm);
  }
  
  .stroke-label {
    font-size: 0.75rem;
    color: var(--color-text-muted);
    background: var(--color-border-light);
    padding: var(--space-xs) var(--space-sm);
    border-radius: var(--radius-sm);
    font-family: var(--font-mono);
  }
  
  /* Responsive adjustments */
  @media (max-width: 768px) {
    .chinese-character {
      padding: var(--space-md);
    }
    
    .stroke-container {
      width: 100px;
      height: 100px;
    }
    
    .char-display {
      font-size: 2.5rem !important;
    }
  }
  
  .radical-section {
    width: 100%;
    margin-top: var(--space-md);
  }
  
  /* Animaci√≥n para mostrar/ocultar detalles */
  .chinese-character.expanded .stroke-section,
  .chinese-character.expanded .radical-section {
    border-top: 1px solid var(--color-border-light);
    padding-top: var(--space-md);
    margin-top: var(--space-md);
  }
  
  /* Estados de carga */
  .stroke-animation[src=""] {
    display: none;
  }
  
  .loading .stroke-container::after {
    content: 'Âä†ËΩΩ‰∏≠...';
    position: absolute;
    font-size: 0.8rem;
    color: var(--color-text-muted);
  }
</style>

<script>
  // Interactividad mejorada
  document.addEventListener('DOMContentLoaded', function() {
    const characters = document.querySelectorAll('.chinese-character');
    
    characters.forEach(char => {
      const charDisplay = char.querySelector('.char-display');
      const hanzi = char.dataset.hanzi;
      
      // Click para expandir/contraer informaci√≥n
      charDisplay?.addEventListener('click', () => {
        char.classList.toggle('expanded');
      });
      
      // Copiar car√°cter al clipboard
      charDisplay?.addEventListener('dblclick', async () => {
        try {
          await navigator.clipboard.writeText(hanzi);
          
          // Feedback visual
          const originalText = charDisplay.textContent;
          charDisplay.textContent = '‚úì';
          charDisplay.style.color = 'var(--color-socialist-gold)';
          
          setTimeout(() => {
            charDisplay.textContent = originalText;
            charDisplay.style.color = '';
          }, 1000);
        } catch (err) {
          console.log('No se pudo copiar al portapapeles');
        }
      });
    });
    
    // Precargar stroke animations
    const strokeImages = document.querySelectorAll('.stroke-animation');
    strokeImages.forEach(img => {
      const container = img.closest('.stroke-container');
      container?.classList.add('loading');
      
      img.addEventListener('load', () => {
        container?.classList.remove('loading');
      });
      
      img.addEventListener('error', () => {
        container?.classList.remove('loading');
      });
    });
  });
</script>